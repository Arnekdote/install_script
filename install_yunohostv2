#!/bin/bash

# Copyright (C) 2015 kload, beudbeud
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

print() {
    printf "%s\n" "$*";
}

notify_about_install_logs() {
    print "
Installation logs are located in /var/log/yunohost.log
" 1>&2

}

success() {
    tput setf 2
    print "
Success !
"
    tput sgr 0
    notify_about_install_logs
}

die() {
    print "\
=================================================="

    tput setf 4
    print "
Failure !
The following error was caught during Yunohost installation :

$1
" 1>&2
    tput sgr 0
    notify_about_install_logs
    exit ${2:-1}
}

this_script_path() {
    # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
    local SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      local DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    echo $DIR
}

ensure_root() {
    if [ "$(id -u)" != "0" ] ;
    then
        return 1
    fi
    return 0
}

installscript_dependencies() {
    # install dependencies of the install script itself
    local packages="lsb-release wget whiptail"

    debconf-apt-progress                             \
        --logfile /var/log/yunohost.log              \
        --                                           \
        apt-get update                               \
        || return 1
    debconf-apt-progress                             \
        --logfile /var/log/yunohost.log              \
        --                                           \
        apt-get -o Dpkg::Options::="--force-confold" \
                -y install                           \
                $packages                            \
        || return 2

    return 0
}

create_custom_config() {
    if [[ ! -f /etc/yunohost/yunohost.conf ]]
    then
        mkdir /etc/yunohost/
        touch /etc/yunohost/from_script
        cat << EOF > /etc/yunohost/yunohost.conf
# Yunohost custom config
# If you want to keep a custom service configuration replace "no" by "yes"
# for the concerned service

amavis=no
avahi=no
dovecot=no
iptables=no
metronome=no
mysql=no
nginx=no
postfix=no
samba=no
slapd=no
ssh=yes
ssowat=no
EOF
    fi
}

set_domain() {
    # Configure hostname to yunohost.yunohost.org if not already set
    # NOTE: This is done also during postinstall "to avoid amavis bug"
    #       so we might not need it here
    [ "$(hostname -d > /dev/null 2>&1)" != "" ] || hostname yunohost.yunohost.org > /dev/null 2>&1
}

confirm_installation() {
  local text="
Caution !

Your configuration files for :
  - postfix
  - dovecot
  - mysql
  - nginx
  - metronome
will be overwritten !

Are you sure you want  to proceed with the installation of Yunohost?
"
  whiptail --title "Yunohost Installation" --yesno "$text" 20 78
}

setup_package_source() {
    local CUSTOMAPT=/etc/apt/sources.list.d/yunohost.list

    # In any case we need the main stable repo
    echo "deb http://repo.yunohost.org/ megusta main" > $CUSTOMAPT

    # Also add repositories for 'testing' and/or 'unstable' if the script has been called with those arguments
    if [ $# -gt 0 ]; then
        if [[ "$1" == "test" ]] || [[ "$1" == "testing" ]] ; then
            echo "deb http://repo.yunohost.org/ testing main" >> $CUSTOMAPT
        fi
        if [[ "$1" == "daily" ]] || [[ "$1" == "unstable" ]] ; then
            echo "deb http://repo.yunohost.org/ testing main" >> $CUSTOMAPT
            echo "deb http://repo.yunohost.org/ unstable main" >> $CUSTOMAPT
        fi
    fi

    # Add YunoHost repository key to the keyring
    wget -O- http://repo.yunohost.org/yunohost.asc -q | apt-key add - -qq > /dev/null
}

apt_update() {
    debconf-apt-progress                       \
        --logfile /var/log/yunohost.log        \
        --                                     \
        apt-get update
}

register_debconf() {
    if [ $(lsb_release -c | awk '{print $2}') = jessie ];
    then
        debconf-set-selections $(this_script_path)/debconfjessie
    else
        debconf-set-selections $(this_script_path)/debconfv2
    fi
}

workaround_avahi_installation() {

    # When attempting several installation of Yunohost on the same host
    # with a light VM system like LXC
    # we hit a bug with avahi-daemon postinstallation
    # This is described in detail in https://github.com/lxc/lxc/issues/25
    #  
    # It makes the configure step of avahi-daemon fail, because the service does
    # start correctly. Then all other packages depending on avahi-daemon refuse to
    # configure themselves.
    #  
    # The workaround we use is to generate a random uid for the avahi user, and
    # create the user with this id beforehand, so that the avahi-daemon postinst
    # script does not do it on its own. Our randomized uid has far less chances to
    # be already in use in another system than the automated one (which tries to use
    # consecutive uids).
  
    # Return without error if avahi already exists
    [ $(id avahi > /dev/null 2>&1) ] || return 0
 
    # Get a random unused uid between 500 and 999 (system-user) 
    local avahi_id=$((500 + $RANDOM % 500))
    while [ $(cat /etc/passwd | cut -d ':' -f 3 | grep $avahi_id) ] ;
    do
        avahi_id=$((500 + $RANDOM % 500))
    done

    # Use the same adduser parameter as in the avahi-daemon postinst script
    # Just specify --uid explicitely
    adduser --disabled-password  --quiet --system     \
        --home /var/run/avahi-daemon --no-create-home \
        --gecos "Avahi mDNS daemon" --group avahi     \
        --uid $avahi_id
}

install_yunohost_packages() {
    debconf-apt-progress                             \
        --logfile /var/log/yunohost.log              \
        --                                           \
        apt-get -o Dpkg::Options::="--force-confold" \
                -y install                           \
                yunohost yunohost-config             \
                yunohost-config-postfix              \
                postfix postfix-ldap                 \
                postfix-policyd-spf-perl
}

restart_services() {
    service slapd restart
#    service yunohost-firewall start
#    service nscd restart
#    service nslcd restart

    # NOTE : We don't fail if slapd fails to restart...
    return 0
}

post_install() {
    # Remove whiptail and dialog remains...
    clear

    local text="
Yunohost packages have been installed successfully!

You can now proceed with Yunohost post-installation.
This is where you will be asked for :
- the main DNS domain name of your server
- the administration password

You can also perform this step later on your own :
- either from a shell, by running 'yunohost tools postinstall'
  as root
- either from your web browser, by accessing https://yunohost.local

Please refer to https://yunohost.org/#/postinstall
for additionnal information.

Do you want to proceed with YunoHost post-installation now?
"
    whiptail --title "Post-installation" --yesno "$text" 25 78 \
        || return 0

    /usr/bin/yunohost tools postinstall
   
    local POSTINSTALL_EXIT_CODE="$?"
    while [ "$POSTINSTALL_EXIT_CODE" -ne 0 ] ;
    do
        local text_retry="
Yunohost post-installation has failed.

Do you want to try again now?
"
        whiptail --title "Post-installation" --yesno "$text_retry" 12 78 --defaultno \
            || return $POSTINSTALL_EXIT_CODE

        /usr/bin/yunohost tools postinstall
        POSTINSTALL_EXIT_CODE="$?"
    done
    return 0   
}

# Treat unset variables as an error when performing
# parameter expansion. An error message will be written
# to the standard error, and a non-interactive shell will exit.
set -u

if ! ensure_root ; then
  die "This script must be run as root" 1
fi

if ! installscript_dependencies ; then
  die "Unable to install dependencies to install script" 2 
fi

if ! create_custom_config ; then
  die "Creating custom configuration file /etc/yunohost/yunohost.conf failed" 3
fi

if ! set_domain ; then
  die "Setting hostname failed" 4
fi

if ! confirm_installation ; then
  die "Installation cancelled at your request" 5
fi

if ! setup_package_source "$@" ; then
  die "Setting up deb package sources failed" 6
fi

if ! apt_update ; then
  die "Error caught during 'apt-get update'" 7
fi

if ! register_debconf ; then
  die "Unable to insert new values into debconf database" 8
fi

if ! workaround_avahi_installation ; then
  die "Unable to install workaround for avahi installation" 20
fi

if ! install_yunohost_packages ; then
  die "\
Installation of Yunohost packages failed

You can check the install logs saved in /var/log/yunohost.log
" 9
fi

if ! restart_services ; then
  die "Error caught during services restart" 10
fi

if ! post_install ; then
  die "Post-installation failed" 11
fi

# Success !
success
exit 0

